# -*- coding: utf-8 -*-
"""
    manage
    ~~~~~~

    Manager module
"""

import os 
from flask.ext.script import Manager, prompt, prompt_pass, prompt_bool
from flask import render_template_string

from adsws.api import create_app
from adsws.manage import CreateUserCommand, DeleteUserCommand, ListUsersCommand

    
manager = Manager(create_app())
manager.add_command('create_user', CreateUserCommand())
manager.add_command('delete_user', DeleteUserCommand())
manager.add_command('list_users', ListUsersCommand())



    
@manager.command
def create_local_config():
    """Generate a local_config.py with necessary settings"""
    _basedir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
    local_config_path = os.path.join(_basedir, './local_config.py')
    if os.path.exists(local_config_path):
        print "local_config.py exists"
        if not prompt_bool("Overwrite"):
            return
    config_items = {}
    if prompt_bool("Generate SECRET_KEY", True):
        config_items['SECRET_KEY'] = os.urandom(24).encode('hex')
        config_items['ACCOUNT_VERIFICATION_SECRET'] = os.urandom(24).encode('hex')
    else:
        print "OK. You'll need to include a SECRET_KEY in local_config.py for the app to run."
    output = render_template_string("""
# Automatically generated by: python manage.py create_local_config
{% for key, value in config.iteritems() %}
{{ key }} ='{{ value }}'
{% endfor %}
""", config=config_items)
    with open(local_config_path, 'w') as lc:
        print >>lc, output
    print "local_config.py created"
        
@manager.command
def generate_secret_key():
    """Generate a random string suitable for using a the SECRET_KEY value"""
    print "SECRET_KEY = '%s'" % os.urandom(24).encode('hex')
    print "ACCOUNT_VERIFICATION_SECRET = '%s'" % os.urandom(24).encode('hex')


if __name__ == "__main__":
    manager.run()
